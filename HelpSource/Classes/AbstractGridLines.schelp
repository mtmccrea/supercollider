CLASS:: AbstractGridLines
summary:: given a spec and the actual data's min and max values, calculates the ideal spacing and labelling of grid lines for plotting
categories:: GUI>Accessories
related:: Classes/GridLines, Reference/plot, Classes/Plotter, Classes/DrawGrid

DESCRIPTION::
code::AbstractGridLines:: and its subclasses are strategy objects that find a suitable intervals for plot grid lines and labels. The data range and warping behavior (e.g. linear or exponential) are derived from the corresponding link::Classes/ControlSpec::. The instance methods of code::AbstractGridLines:: are used by link::Classes/DrawGrid:: (which is in turn used by link::Classes/Plotter::) for getting logically spaced intervals that span the data for drawing grid lines on a plot.

Neither code::AbstractGridLines:: nor its subclasses are to be instantiated directly. Instead, the link::Classes/GridLines:: factory class or the link::Classes/ControlSpec#-grid:: method should be used to return the appropriate code::AbstractGridLines:: subclass.

Subclasses of code::AbstractGridLines:: bind more tightly with the data they represent. For example, code::LinearGridLines:: and code::ExponentialGridLines:: represent data on a linear and exponential scale, respectively. Future additions might include subclasses like teletype::DegreeGridLines:: to draw pitch degree grid lines behind a frequency plot.

code::
\freq.asSpec.grid
::

This default implementation does not know anything about the data is displaying:

code::
DrawGrid.test(nil, \midinote.asSpec.grid);
::

A MidinoteGridLines could be written that labels these correctly, shows octaves and individual notes depending on the current zoom.

Note that the code::AbstractGridLines:: does not know which axis it is to be used on and could also be used in polar plots or in 3D rendering.

CLASSMETHODS::

METHOD:: new

argument:: spec
The ControlSpec that defines the minimum and maximum values, warp and step.

returns:: a AbstractGridLines


INSTANCEMETHODS::

METHOD:: spec
get/set the spec

returns:: a ControlSpec

METHOD:: asGrid
return self.  nil.asGrid would return a BlankGridLines which is a subclass of AbstractGridLines.  So when plotting if you specify a grid of nil then you will get no lines at all.

returns:: self

METHOD:: niceNum
Based on: http://books.google.de/books?id=fvA7zLEFWZgC&pg=PA61&lpg=PA61

This rounds a value to a logical nice number.  It is mostly used to support internal calculation, though it may be useful for other applications.

argument:: val
The value.

argument:: round
Boolean. Rounding uses a specific algorithm.  This is not simple rounding to an integer value.

returns:: the nice number

METHOD:: ideals
for internal use

argument:: min
(describe argument here)

argument:: max
(describe argument here)

argument:: ntick
(describe argument here)

returns:: (returnvalue)

METHOD:: looseRange
Returns the logical minimum and maximum that will contain the data.

argument:: min
minimum value

argument:: max
maximum value.

argument:: ntick
the number of lines you would like (which usually varies by how much screen space you have and what you consider cluttered)

returns:: [ideal min, ideal max]

METHOD:: getParams
Specifically for use by DrawGrid. This returns a dictionary filled with:
'lines': an array of values where lines should be drawn
'labels': [value, formatted label] for each line

argument:: valueMin
minimum value of the data to be plotted

argument:: valueMax
maximum value of the data to be plotted

argument:: pixelMin
If numTicks is nil: used to guess the ideal numTicks based on the graph size.

argument:: pixelMax
If numTicks is nil: used to guess the ideal numTicks based on the graph size.

argument:: numTicks
Explicit number of ticks you would like to see on the graph.

argument:: tickSpacing
Approximate distance between ticks (in pixels). This value is only used when code::numTicks:: is code::nil::.

returns:: A dictionary

METHOD:: formatLabel
Round the value and append the spec's units

argument:: val
The value

argument:: numDecimalPlaces
Number of decimal places

returns:: a string

private:: prCheckWarp
