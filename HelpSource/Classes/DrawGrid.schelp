CLASS:: DrawGrid
summary:: Draws grid lines on a UserView for plotting
categories:: GUI>Accessories
related:: Reference/plot, Classes/AbstractGridLines, Classes/GridLines, Classes/Plotter, Classes/UserView

DESCRIPTION::
code::DrawGrid:: is used by link::Classes/Plotter:: to draw the grid lines on a graph. It can also be used to draw link::Classes/GridLines:: on any link::Classes/UserView:: and could even be used to add grid lines to code::UserView::s behind sliders or in any GUI.

Note that code::DrawGrid:: does not hold any reference to the code::UserView:: but is meant to have its code::.draw:: method called inside of the code::UserView::'s code::drawFunc::.  It only needs to know what bounds the grid lines should be drawn within and what the horizontal and vertical code::GridLines:: are.


CLASSMETHODS::

METHOD:: new

argument:: bounds
The bounds describing the extents of the grid (not including any labels).
Multiple code::DrawGrid:: may be used to draw grids on a single link::Classes/UserView::.

argument:: horzGrid

A grid lines object, such as link::Classes/LinearGridLines:: or link::Classes/ExponentialGridLines:: (which can be instantiated via link::Classes/GridLines::), or link::Classes/BlankGridLines::.

argument:: vertGrid
A grid lines object, such as link::Classes/LinearGridLines:: or link::Classes/ExponentialGridLines:: (which can be instantiated via link::Classes/GridLines::), or link::Classes/BlankGridLines::.

returns:: A code::DrawGrid::.

METHOD:: test
For testing a new link::Classes/AbstractGridLines:: object.
code::
DrawGrid.test(\freq.asSpec.grid, \amp.asSpec.grid);
DrawGrid.test(nil, \lofreq.asSpec.grid);
::

See more link::#Testing in a UserView#Examples:: below. See link::#-test:: for testing a code::DrawGrid:: that has already been created.

argument:: horzGrid
An link::Classes/AbstractGridLines:: subclass.

argument:: vertGrid
An link::Classes/AbstractGridLines:: subclass.

argument:: bounds
Bounds describing the extents of the grid (not including any labels) within the parent view. Can be a link::Classes/Point:: or link::Classes/Rect::.
Default: code::500 @ 400::. Note: the

returns:: A code::DrawGridTest:: (subclass of code::DrawGrid::).


INSTANCEMETHODS::

METHOD:: draw
This draws to the currently active link::Classes/UserView::. This method is meant to be called from inside the link::Classes/UserView#-drawFunc#drawFunc:: of a code::UserView::.

returns:: code::nil::


METHOD:: horzGrid
Set the X axis grid lines.

argument:: g
An link::Classes/AbstractGridLines:: subclass.

returns:: Self.


METHOD:: vertGrid
Set the Y axis grid lines.

argument:: g
An link::Classes/AbstractGridLines:: subclass.

returns:: Self.


METHOD:: bounds
Get/set bounds describing the extents of the grid (not including any labels).

argument:: b
A link::Classes/Rect::.

returns:: A link::Classes/Rect::.


METHOD:: font
Get/set the font used by the grid lines labels.

argument:: f
A link::Classes/Font::.

returns:: A link::Classes/Font::.

METHOD:: fontColor
Get/set the font color.

argument:: c
A link::Classes/Color::.

returns:: A link::Classes/Color::.

METHOD:: gridColors
Set the colors of the grid lines for each axis.

argument:: colors
An link::Classes/Array:: of two colors for the x and y grid lines, respectively.

returns:: Self.

METHOD:: opacity
Get/set opacity.

returns:: A code::Float::.

METHOD:: smoothing
A code::Boolean:: which turns on/off anti-aliasing. See link::Classes/Pen#*smoothing::.

returns:: A code::Boolean::.

METHOD:: linePattern
Set the line dash pattern. pattern should be a link::Classes/FloatArray:: of
values that specify the lengths of the dashes and spaces.
For example, code::FloatArray[10.0, 3.0, 5.0, 3.0]::, for alternating dashes of lengths code::10.0:: and code::5.0:: pixels, separated by spaces of code::3.0:: pixels.
See link::Classes/Pen#*lineDash::.

returns:: Self.

METHOD:: x
A link::Classes/DrawGridX:: object that draws the x (horizontal) axis. In
general you shouldn't need to set this.

returns:: A link::Classes/DrawGridX::.

METHOD:: y
A link::Classes/DrawGridY:: object that draws the y (vertical) axis. In general
you shouldn't need to set this.

returns:: A link::Classes/DrawGridY::.


METHOD:: numTicks
Set the emphasis::approximate:: number of grid lines ("ticks") for each axis.
If code::nil::, the number of grid lines with change with the view size, constrained by this code::tickSpacing::.
Default: code::nil::.

See link::#Testing in a UserView#Examples:: below.

argument:: xnum
emphasis::Approximate:: number of grid lines ("ticks") for the x-axis.

argument:: ynum
emphasis::Approximate:: number of grid lines for the y-axis.


METHOD:: tickSpacing
Set the emphasis::minimum:: spacing between grid lines ("ticks") for each axis. If strong::numTicks:: is code::nil::, the number of grid lines with change with the view size, constrained by this code::tickSpacing::, allowing you to control the maximum density of grid lines.

See link::#Testing in a UserView#Examples:: below.

argument:: xpx
emphasis::Minimum:: spacing between grid lines ("ticks") on the x-axis (pixels, default: 64).

argument:: ypx
emphasis::Minimum:: spacing between grid lines on the y-axis (pixels, default: 64).


METHOD:: test
Testing this code::DrawGrid:: object by creating a window with a view showing the code::DrawGrid:: in its current state.

code::
d = DrawGrid(nil, \freq.asSpec.grid, \amp.asSpec.grid);
d.linePattern_(FloatArray[10.0, 5.0, 2.0, 5.0]);
d.test;
::



See more link::#Testing in a UserView#Examples:: below. See link::#*test:: for testing (and creating) a code::DrawGrid:: directly from the provided code::GridLines::.


METHOD:: copy
Safely make a copy of this object and its working members.

returns:: A new code::DrawGrid::.


PRIVATE:: clearCache, init

EXAMPLES::

SUBSECTION:: Basic Usage

code::
(
w = Window.new.front;
u = UserView(w,w.bounds.size.asRect);

// the Spec can define its preferred grid system
x = \lofreq.asSpec.grid;
y = \amp.asSpec.grid;
d = DrawGrid(u.bounds.size.asRect.insetBy(20), x, y);

u.drawFunc = { d.draw };
u.resize_(5).onResize = { |u| d.bounds = u.bounds.size.asRect.insetBy(20) }
)
::

SUBSECTION:: Testing in a UserView

For testing the look and feel of your code::GridLines::, you can create and immediately render your code::DrawGrid:: using the link::#*test:: class method, or call link::#-test:: on your already-instantiated code::DrawGrid:: object.

Create and immediately render your code::DrawGrid:: using the link::#*test:: class method:
code::
(
c = ControlSpec.new(20,200, \lin, units: "myUnits");
g = c.grid;
~test = DrawGrid.test(g,g)
)
::

The returned code::DrawGridTest:: is a subclass of code::DrawGrid::, so you can call all the methods you would on code::DrawGrid::, modifying its properties then refresh the view to see the changes:
code::
~test.x.numTicks_(23); // update the internal GridLinesX
~test.refresh;         // then refresh your test view

~test.x.numTicks_(nil); // numTicks = nil: defers to -tickSpacing
~test.refresh;
::

code::DrawGrid:: convenience methods like link::#-numTicks:: and link::#-tickSpacing:: can set both internal code::GridLines:: (link::#-x:: and link::#-y::) together. So link::#-refresh:: can be called directly:
code::
~test.numTicks_(nil).tickSpacing_(75).refresh;
~test.linePattern_(FloatArray[10.0, 5.0, 2.0, 5.0]).refresh;
::


Alternatively, you can instantiate your code::DrawGrid::, modify its properties, then preview it with the link::#-test:: instance method:
code::
(
var xspec = ControlSpec.new(20, 2000, \lin, units: "xUnits");
var yspec = ControlSpec.new(20, 200, \lin, units: "yUnits");
d = DrawGrid.new(horzGrid: xspec.grid, vertGrid: yspec.grid);
// set its properties before testing
d.x.tickSpacing_(25);
)

~test = d.test;
::

Then, subsequently modify its appearance, all code::DrawGrid::'s methods are inherited for use by the test object:
code::
// Set axis grid poperties
~test.x.tickSpacing_(5); // fixed *density* of ticks
~test.y.numTicks_(5);    // fixed *number* of ticks (approximate)
~test.refresh;           // refresh the test
::

Or use code::DrawGrid::'s convenience methods to set underlying grid properties, then you can refresh the code::DrawGridTest:: directly.
code::
~test.tickSpacing_(8, 50).refresh;
::
